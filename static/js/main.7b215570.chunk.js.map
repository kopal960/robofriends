{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/namebox.js","components/scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducer.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","React","Component","CardList","arr","robots","map","key","SearchBox","type","placeholder","onChange","searchChange","Namebox","nameset","Scroll","style","overflowY","height","border","width","children","ErrorBoundry","state","haserror","error","info","setState","App","OnrequestRobots","searchField","isPending","filtered","filter","user","toLowerCase","includes","connect","searchRobots","requestRobots","setname","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","istateSearch","istateRobots","istatename","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","root","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7b215570.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component{\r\n    render(){\r\n        return(\r\n                <div className=\"tc bg-light-green dib grow br3 ma2 pa3 bw2 shadow-5\">\r\n                    <img alt=\"profile\" src= {`https://robohash.org/${this.props.id}?200x200`} />\r\n                    <div className=\"bg-light-green\">\r\n                        <h2>\r\n                            {this.props.name}\r\n                        </h2>\r\n                        <p>{this.props.email}</p>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\nconst arr = robots.map( ({name,id,email}) =>\r\n { \r\nreturn (\r\n        <Card name={name} key={id} id={id} email={email} />\r\n    )\r\n }\r\n );\r\n    return(\r\n        <div>\r\n            {arr}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component \r\n{\r\n    render(){\r\n        return(\r\n            <div >\r\n                <input className= \"pa3 ba b--green bg-lightest-blue\" type='search'  placeholder = {`search Robots...`}  onChange={this.props.searchChange} >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBox;","import React ,{Component} from 'react';\r\n\r\nclass Namebox extends Component\r\n{\r\n    render(){\r\n        return (\r\n            <div >\r\n                <input className= \"pa3 ba b--green bg-lightest-blue\" type='search'  placeholder = {`Your name here..`}  onChange={this.props.nameset} >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Namebox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY :'scroll' ,height :'1000px' , border :'2px solid black' ,width: '100%' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n   \r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {haserror :false};\r\n    }\r\n\r\n    componentDidCatch ( error, info)\r\n    {\r\n        this.setState ({haserror : true})\r\n    }\r\n\r\n    render ()\r\n    {   \r\n        if(this.state.haserror)\r\n            return <h2>Something went wrong</h2>\r\n        else\r\n            return this.props.children\r\n         \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React , {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {connect} from 'react-redux';\r\nimport Namebox  from '../components/namebox';\r\nimport './App.css';\r\nimport Scroll from '../components/scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchfield,requestRobots ,setname } from '../actions';\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {searchField: state.searchRobots.searchField,\r\n            robots : state.requestRobots.robots,\r\n            isPending: state.requestRobots.isPending,\r\n            error:state.requestRobots.error,\r\n            name: state.setname.name }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\r\n    return {\r\n        searchChange : (event) => dispatch(setSearchfield(event.target.value)),\r\n        OnrequestRobots: () => dispatch(requestRobots()),\r\n        nameset : (event) => dispatch(setname(event.target.value))\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n            this.props.OnrequestRobots();\r\n    }\r\n    render() {\r\n        const {searchField,searchChange ,robots, isPending,nameset ,name} = this.props;\r\n        const filtered = robots.filter((user) => user.name.toLowerCase().includes(searchField.toLowerCase()));\r\n         return (isPending)?\r\n           ( <h1 className=\"robofont tc f1\">Loading....</h1>):(\r\n             <div className='tc '>\r\n                <h1 className='robofont f1'>Robofriends</h1>\r\n                <h4 className=' f2'>Welcome {name}!</h4>\r\n                <div className=\"flex\">\r\n                    <Namebox  nameset = {nameset}/>\r\n                    <SearchBox  searchChange={searchChange}/>\r\n                </div>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots = {filtered}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCHFIELD,\r\n      REQUEST_ROBOTS_PENDING,\r\n      REQUEST_ROBOTS_SUCCESS,\r\n      REQUEST_ROBOTS_FAILED,\r\n      CHANGE_NAME\r\n    } from './constants';\r\n\r\nexport const setSearchfield = (text) =>\r\n{\r\n    return{ type: CHANGE_SEARCHFIELD,\r\n        payload : text}\r\n}\r\n\r\nexport const setname = (text) =>\r\n{\r\n    return {\r\n        type : CHANGE_NAME,\r\n        payload :text\r\n    }\r\n} \r\nexport const requestRobots = () => (dispatch)=>\r\n{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then( data => dispatch ({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED , payload:error}))\r\n    \r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\nexport const CHANGE_NAME = \"CHANGE_NAME\";","import {CHANGE_SEARCHFIELD,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_FAILED,\r\n        CHANGE_NAME} from  './constants';\r\n        \r\n\r\nconst istateSearch = {\r\n    searchField : '',\r\n}\r\n\r\nexport const searchRobots = (state=istateSearch , action={})=>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case CHANGE_SEARCHFIELD:\r\n            return {...state, searchField:action.payload};\r\n        default: \r\n            return state;\r\n    }\r\n}\r\nconst istateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error:''\r\n}\r\nexport const requestRobots = (state=istateRobots , action={}) =>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state , isPending:true};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state ,error:action.payload , isPending:false }   \r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state ,robots:action.payload , isPending:false}\r\n        default:\r\n            return state; \r\n    }\r\n}\r\nconst istatename = {\r\n    name : \"\"\r\n}\r\nexport const setname = (state=istatename , action={})=>\r\n{\r\n    if (action.type===CHANGE_NAME)\r\n        return {...state , name:action.payload}\r\n    else\r\n        return state;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore ,applyMiddleware ,combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport './index.css';\nimport {searchRobots , requestRobots ,setname} from './reducer';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = combineReducers({searchRobots ,requestRobots,setname})\nconst store = createStore(root, applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}